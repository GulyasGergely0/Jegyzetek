----------Utasítások----------
-i                      -interakív - shell ben hozzáférünk az image-hez (pl. ubuntu)
-t                      -sudo, teljes hozzáférés
-a                      -all
docker ps               -futó konténerek
CREATE DATABASE nev;
DROP DATABASE nev;


docker pull
docker run -t -i leskoaripi/nmap
npa - network map  --- hálózat felderítés

 docker -p				-p (port forwarding)
 docker -d				-d (deamonizálás)
 
 docker container ls - (list cointainers) konténereket kiírja
 docker container kill myXampp
 docker container ls -a			-a(all)
 docker container rm myXampp		-rm (remove)
 docker images				-images megejeneítése
 docker rmi pl Ubunut:latest		-rmi (remove image)
 docker start (container id)  -Ha a container exited status alatt van, start-al elindíthatjuk
 docker exec -it Név bash     -Konténer termináljának elérése
 
 sudo docker start konénerID  - elindítja az exitelt konténert
 
 
ezen belül xampp szerver; google docker tomsik68 xampp
oldalon lévő commandból port; localhost.(port)
 
 
namp -v -A weboldal
http - 80 as protokol
https - 443 as protokol
ssh 	22

192.168, 10. csak privát tartomány

1. óra
keresnivalók
apache webszerver
trace route
openwrt.lan

2. óra
ssh
scp

3. óra

suilpy feladat

CREATE DATABASE kutyamenhely;
USE kutyamenhely;

CREATE TABLE kutyak(
    id INT PRIMARY KEY AUTO_INCREMENT,
    nev VARCHAR(50) NOT NULL,
    kor INT CHECK (kor < 30),
    nem VARCHAR(50) DEFAULT 'kan',
    megjegyzes VARCHAR(500)
    );

INSERT INTO kutyak (nev, kor, nem, megjegyzes) VALUES ('Buksi', 3, 'kan', 'diabetikus');
INSERT INTO kutyak (nev, kor, nem, megjegyzes) VALUES ('Virag', 5, 'szuka', 'bolond');

4. óra

Sulipy SQL 4.: Függvények 

1.:
a; SELECT AVG(standard_cost) FROM products;
b; SELECT AVG(list_price) FROM products WHERE list_price < 30;
c; SELECT AVG(standard_cost) FROM products WHERE category = 'Sauces';

2.:
a; SELECT SUM(standard_cost) FROM products;
b; SELECT SUM(list_price) FROM products WHERE list_price BETWEEN 20 AND 50;
c; SELECT SUM(standard_cost) FROM products WHERE category <> 'sauces';

3.:
a; SELECT COUNT(id) FROM employees WHERE city = 'Seattle';
b; SELECT COUNT(id) FROM employees WHERE job_title = 'Sales Representative';
c; SELECT COUNT(id) FROM employees WHERE first_name LIKE 'A%';

4.:


köv. óra 
replit englert (sql-koridok)
infojegyzet.hu vizsgafeladatok

köv. óra

import sqlite3

sql = sqlite3.connect("koridok.db")

sql.execute("DROP TABLE IF EXISTS tb")
sql.execute("""
    CREATE TABLE IF NOT EXISTS tb
    (csapat    TEXT,
    versenyzo  TEXT,
    eletkor    INTEGER,
    palya      TEXT,
    korido     TEXT,
    kor        INTEGER,
    sec        INTEGER)
    """)
sql.commit()

with open('autoverseny.txt') as f:
    fejlec = f.readline().strip()
    for sor in f:
        csapat, versenyzo, eletkor, palya, korido, kor = sor.strip().split(';')
        óra, perc, másodperc = korido.split(':')
        sec = int(óra)*3600 + int(perc)*60 + int(másodperc)
        sql.execute(" INSERT INTO tb VALUES (?,?,?,?,?,?,?) ", ( csapat, versenyzo, eletkor, palya, korido, kor, sec ) )
sql.commit()

# 3. feladat

sorok_szama = sql.execute("SELECT COUNT(*) as sorok_szama FROM tb").fetchone()[0]
print(f"{sorok_szama} sornyi adat található a táblában.")

# 4. feladat

futott = sql.execute("SELECT korido FROM tb WHERE versenyzo='Fürge Ferenc' AND palya='Gran Prix Circuit' AND kor=3 FROM tb").fetchone()[0]
print(f"Fürge Ferenc {futott} időt futott a Gran Prix Circuit pályán harmadik nekifutásán.")





